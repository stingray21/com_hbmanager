{"version":3,"names":[],"mappings":"","sources":["goalchart.js"],"sourcesContent":["\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n  console.log(\"DOM fully loaded and parsed\");\n  console.log(teamkey);\n  console.log(season);\n  console.log(futureGames); // dimensions\n\n  var margin = {\n    top: 10,\n    right: 20,\n    bottom: 140,\n    left: 50\n  };\n  var height = 300;\n  var widthLegend = 150;\n  var legendElementHeight = 16;\n  var width;\n  var divHeight;\n  var legendPosX;\n  var legendPosY;\n  var divWidth = parseInt(d3.select('#chartgoals').style('width'), 10); //console.log(divWidth);\n\n  if (divWidth > 480) {\n    width = divWidth - margin.left - margin.right - widthLegend; //height = divWidth / 2;\n\n    divHeight = height + margin.top + margin.bottom;\n    legendPosX = divWidth - widthLegend;\n    legendPosY = margin.top;\n  } else {\n    width = divWidth - margin.left - margin.right; //height = divWidth / 2;\n\n    divHeight = height + margin.top + margin.bottom + 300;\n    legendPosX = margin.left;\n    legendPosY = height + margin.top + margin.bottom;\n  } // time duration for changing dataset\n\n\n  var yDelay = 500;\n  var emphasizeDelay = 100;\n  var x = d3.scale.ordinal().rangePoints([0, width]);\n  var y = d3.scale.linear().range([height, 0]);\n  var color = d3.scale.category20c();\n  var gridColor = \"#ddd\";\n  var gridStroke = \"2, 2\";\n  var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n  var yAxis = d3.svg.axis().scale(y).tickSize(-10, 0, 0).orient(\"left\"); // using ticks as workaround for grid lines\n\n  var xGrid = d3.svg.axis().scale(x).orient(\"bottom\").tickSize(-height, 0, 0).tickFormat(\"\").ticks(10); // using ticks as workaround for grid lines\n\n  var yGrid = d3.svg.axis().scale(y).orient(\"left\").tickSize(-width, 0, 0).tickFormat(\"\").ticks(10); // variable as switch for what data should be displayed\n\n  var yMode = getYMode(); // line, that is bound to game data\n\n  var valueline = d3.svg.line().x(function (d) {\n    return x(d.x);\n  }).y(function (d) {\n    return y(d.y);\n  }); // create the svg for chart\n\n  var chartsvg = d3.select(\"#chartgoals\").append(\"svg\").attr(\"width\", divWidth).attr(\"height\", divHeight).style(\"fill\", \"none\"); // svg background\n\n  var chartBackground = chartsvg.append(\"rect\").attr(\"width\", \"100%\").attr(\"height\", \"100%\"); // Append 'g' in a place that is the actual area for the graph\n\n  var chart = chartsvg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // group for legend\n\n  var legend; // console.log(playersJSON);\n\n  x.domain(gamesJSON.map(function (game) {\n    return game.game;\n  }));\n  y.domain([0, getMaxY(playersJSON)]); // draw chart\n\n  buildAxis();\n  buildLegend(playersJSON);\n  populateData();\n  resize(); // trigger to change the displayed dataset\n  // d3.selectAll(\"[name=mode]\").on(\"change\", function() {\n\n  d3.select(\"#hbgoalchart_chartmode\").selectAll('input').on(\"change\", function () {\n    yMode = this.value;\n    updateData(yDelay);\n  }); // resizing for responsive chart\n\n  d3.select(window).on('resize', function () {\n    resize();\n  });\n\n  function resize() {\n    // update width\n    divWidth = parseInt(d3.select('#chartgoals').style('width'), 10); //console.log(divWidth);\n\n    if (divWidth > 480) {\n      width = divWidth - margin.left - margin.right - widthLegend; //height = divWidth / 2;\n\n      divHeight = height + margin.top + margin.bottom;\n      legendPosX = divWidth - widthLegend;\n      legendPosY = margin.top;\n    } else {\n      width = divWidth - margin.left - margin.right; //height = divWidth / 2;\n\n      divHeight = height + margin.top + margin.bottom + legendElementHeight * playersJSON.length;\n      legendPosX = margin.left;\n      legendPosY = height + margin.top + margin.bottom;\n    }\n\n    x.rangePoints([0, width]); // y.range([height, 0]);\n    // resize the chart\n\n    chartsvg.attr('height', divHeight + 'px').attr('width', divWidth + 'px'); // change the line\n\n    updateData(0); // change the x axis\n\n    chart.select(\".x.axis\").call(xAxis).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-1em\").attr(\"dy\", \"-0.5em\");\n    chart.select(\".x.grid\").call(xGrid);\n    chart.select(\".y.grid\").transition().duration(0).call(yGrid.tickSize(-width, 0, 0)); // reposition the legend\n\n    legend.transition().duration(0).attr(\"transform\", \"translate(\" + legendPosX + \",\" + legendPosY + \")\");\n  }\n\n  function populateData() {\n    players = playersJSON;\n    players.forEach(function (player, index) {\n      // console.log(players);\n      chart.append(\"path\").attr(\"id\", \"pathid-\" + index).attr(\"class\", \"line player\" + index + \" \" + player.alias).attr(\"d\", valueline(getData(player.games, yMode))).attr(\"stroke\", color(index)).style(\"stroke-width\", 2.5).on(\"mouseover\", function () {\n        emphasizePlayer(index);\n      }).on(\"mouseout\", function () {\n        deemphasizePlayer(index);\n      }).append(\"svg:title\").text(player.name);\n      chart.selectAll(\".point\").data(player.games).enter().append(\"svg:circle\").attr(\"class\", \"dot player\" + index).attr(\"stroke-width\", 2).attr(\"stroke\", color(index)).attr(\"fill\", color(index)).attr(\"cx\", function (d) {\n        return x(d.game);\n      }).attr(\"cy\", function (d) {\n        return y(d[yMode]);\n      }).attr(\"r\", 3).on(\"mouseover\", function (d) {\n        emphasizePlayer(index);\n      }).on(\"mouseout\", function (d) {\n        deemphasizePlayer(index);\n      });\n      chart.selectAll(\".pointtextbox\").data(player.games).enter().append(\"svg:rect\").attr(\"class\", \"dot textbox player\" + index).attr(\"stroke\", color(index)).attr(\"fill\", color(index)).attr(\"x\", function (d) {\n        return x(d.game) - 12;\n      }).attr(\"y\", function (d) {\n        return y(d[yMode]) - 26;\n      }).attr(\"height\", 16).attr(\"width\", 24).attr(\"rx\", 2).attr(\"ry\", 2).style(\"opacity\", 0);\n      chart.selectAll(\".pointtext\").data(player.games).enter().append(\"svg:text\").attr(\"class\", \"dot text player\" + index).attr(\"fill\", \"#222\").attr(\"x\", function (d) {\n        return x(d.game);\n      }).attr(\"y\", function (d) {\n        return y(d[yMode]) - 14;\n      }).text(function (d) {\n        return d[yMode];\n      }).style(\"text-anchor\", \"middle\").style(\"opacity\", 0); // Then call it like this:\n      // console.log(getTextWidth('hello world', 22, 'Arial')); // 105.166.015625\n      // console.log(player.name, getTextWidth(player.name, 22)); // 100.8154296875\n\n      chart.selectAll(\".nametag\").data([player]).enter().append(\"svg:rect\").attr(\"class\", \"namebox player\" + index).attr(\"stroke\", color(index)).attr(\"fill\", color(index)).attr(\"x\", function (d) {\n        return x(d.games[d.games.length - 1].game) + 10;\n      }).attr(\"y\", function (d) {\n        return y(d.games[d.games.length - 1][yMode]) - 10;\n      }).attr(\"height\", 16).attr(\"width\", getTextWidth(player.name, 12, 'Verdana')).attr(\"rx\", 2).attr(\"ry\", 2).style(\"opacity\", 0);\n      chart.selectAll(\".nametag\").data([player]).enter().append(\"svg:text\").attr(\"class\", \"namebox text player\" + index).attr(\"fill\", \"#222\") // .attr(\"stroke\", \"#fff\")\n      .attr(\"x\", function (d) {\n        return x(d.games[d.games.length - 1].game);\n      }).attr(\"y\", function (d) {\n        return y(d.games[d.games.length - 1][yMode]);\n      }).text(function (d) {\n        return d.name;\n      }).attr(\"dx\", 13).attr(\"dy\", \".25em\").style(\"font-size\", \"10px\").style(\"text-anchor\", \"left\").style(\"opacity\", 0);\n    });\n    updateData(0);\n  }\n\n  function updateData(delay) {\n    //console.log(data);\n    x.domain(gamesJSON.map(function (game) {\n      return game.game;\n    }));\n    y.domain([0, getMaxY(playersJSON)]);\n    chart.selectAll(\".line\").transition().duration(delay).attr(\"d\", function () {\n      // console.log(\".line\",this.id);\n      // console.log(parseInt(this.id.replace(\"pathid-\",\"\")));\n      return valueline(getData(playersJSON[parseInt(this.id.replace(\"pathid-\", \"\"))].games)); //return valueline(getData(player.data, yMode));\n    });\n    chart.selectAll(\"circle.dot\").transition().duration(delay).attr(\"cx\", function (d) {\n      return x(d.game);\n    }).attr(\"cy\", function (d) {\n      return y(d[yMode]);\n    });\n    chart.selectAll(\".dot.textbox\").transition().duration(delay).attr(\"x\", function (d) {\n      return x(d.game) - 12;\n    }).attr(\"y\", function (d) {\n      return y(d[yMode]) - 26;\n    });\n    chart.selectAll(\".dot.text\").transition().duration(delay).attr(\"x\", function (d) {\n      return x(d.game);\n    }).attr(\"y\", function (d) {\n      return y(d[yMode]) - 14;\n    }).text(function (d) {\n      return d[yMode];\n    });\n    chart.select(\".y.axis\").transition().duration(delay).call(yAxis).selectAll(\"text\").style(\"font-size\", \"10px\").style(\"fill\", \"#000\");\n    chart.select(\".y.axis\").selectAll(\"line\").style(\"stroke\", gridColor).style(\"stroke-dasharray\", gridStroke);\n    chart.select(\".y.grid\").transition().duration(delay).call(yGrid).selectAll(\"line\").style(\"stroke\", gridColor).style(\"stroke-dasharray\", gridStroke);\n    chart.selectAll(\".namebox\").transition().duration(delay).attr(\"x\", function (d) {\n      return x(d.games[d.games.length - 1].game) + 10;\n    }).attr(\"y\", function (d) {\n      return y(d.games[d.games.length - 1][yMode]) - 10;\n    });\n    chart.selectAll(\".namebox.text\").transition().duration(delay).attr(\"x\", function (d) {\n      return x(d.games[d.games.length - 1].game);\n    }).attr(\"y\", function (d) {\n      return y(d.games[d.games.length - 1][yMode]);\n    });\n  }\n\n  function emphasizePlayer(player) {\n    // console.log(player);\n    d3.select(\"#pathid-\" + player).transition().duration(emphasizeDelay).style(\"stroke-width\", 5);\n    d3.selectAll(\".dot.player\" + player).transition().duration(emphasizeDelay).attr(\"r\", 5);\n    d3.selectAll(\".legendText.player\" + player).transition().duration(emphasizeDelay).style(\"font-size\", \"11px\").style(\"font-weight\", 'bold');\n    d3.selectAll(\".legendBox.player\" + player).transition().duration(emphasizeDelay).attr(\"width\", 10).attr(\"height\", 10).attr(\"transform\", \"translate(-1,-1)\");\n    d3.selectAll(\".dot.textbox.player\" + player).transition().style(\"opacity\", 0.7).duration(2 * emphasizeDelay);\n    d3.selectAll(\".dot.text.player\" + player).transition().style(\"opacity\", 0.9).duration(3 * emphasizeDelay);\n    d3.selectAll(\".namebox.player\" + player).transition().style(\"opacity\", 0.9).duration(3 * emphasizeDelay);\n    d3.selectAll(\".player\" + player).moveToFront();\n    d3.selectAll(\".dot.text.player\" + player).moveToFront();\n  }\n\n  function deemphasizePlayer(player) {\n    d3.select(\"#pathid-\" + player).transition().duration(emphasizeDelay).style(\"stroke-width\", 2.5);\n    d3.selectAll(\".dot.player\" + player).transition().duration(emphasizeDelay).attr(\"r\", 3);\n    d3.selectAll(\".legendText.player\" + player).transition().duration(emphasizeDelay).style(\"font-size\", \"10px\").style(\"font-weight\", 'normal');\n    d3.selectAll(\".legendBox.player\" + player).transition().duration(emphasizeDelay).attr(\"width\", 8).attr(\"height\", 8).attr(\"transform\", \"translate(0,0)\");\n    d3.selectAll(\".dot.textbox.player\" + player).transition().style(\"opacity\", 0).duration(emphasizeDelay);\n    d3.selectAll(\".dot.text.player\" + player).transition().style(\"opacity\", 0).duration(emphasizeDelay);\n    d3.selectAll(\".namebox.player\" + player).transition().style(\"opacity\", 0).duration(3 * emphasizeDelay);\n    d3.selectAll(\".dot.textbox,.dot.text\").moveToBack();\n  }\n\n  function getMaxY(players) {\n    var maxYcalc = d3.max(players.map(function (player) {\n      // console.log(player);\n      return d3.max(player.games.map(function (game) {\n        // console.log(game);\n        // console.log(game[yMode], yMode);\n        return game[yMode];\n      }));\n    })); // maxYcalc = 16;\n\n    var maxY = Math.ceil(maxYcalc / 10) * 10;\n    if (maxY < 30 && maxY > 10 && maxY - maxYcalc > 5) maxY -= 5; // console.log(maxY);\t\t\n\n    return maxY;\n  }\n\n  function buildAxis() {\n    chart.append(\"g\").attr(\"class\", \"x grid\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xGrid).selectAll(\"line\").style(\"stroke\", gridColor).style(\"stroke-dasharray\", gridStroke);\n    chart.append(\"g\").attr(\"class\", \"y grid\").call(yGrid).selectAll(\"line\").style(\"stroke\", gridColor).style(\"stroke-dasharray\", gridStroke); // Add the X Axis\n\n    chart.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis).selectAll(\"text\").style(\"text-anchor\", \"end\").style(\"fill\", \"#000\").style(\"font-size\", \"12px\").attr(\"dx\", \"-1em\").attr(\"dy\", \"-0.5em\").attr(\"transform\", function () {\n      return \"rotate(-75)\";\n    }); // Add the Y Axis\n\n    chart.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(-10,0)\").call(yAxis);\n  }\n\n  function buildLegend(players) {\n    legend = chartsvg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", \"translate(\" + legendPosX + \",\" + legendPosY + \")\");\n    legendElement = legend.selectAll(\"g\").data(players).enter().append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + 0 + \",\" + i * legendElementHeight + \")\";\n    });\n    legendElement.append(\"rect\").attr(\"class\", function (d, i) {\n      return \"legendBox player\" + i;\n    }).attr(\"width\", 8).attr(\"height\", 8).style(\"fill\", function (d, i) {\n      return color(i);\n    });\n    legendElement.append(\"text\").attr(\"class\", function (d, i) {\n      return \"legendText player\" + i;\n    }).attr(\"x\", 14).attr(\"y\", 4.5).attr(\"dy\", \".35em\").style(\"font-size\", \"10px\").style(\"fill\", \"black\").style(\"cursor\", \"default\").style(\"text-anchor\", \"start\").text(function (d) {\n      return d.name;\n    }).on('mouseover', function (d, i) {\n      emphasizePlayer(i);\n    }).on('mouseout', function (d, i) {\n      deemphasizePlayer(i);\n    });\n  }\n\n  function getData(player) {\n    // console.log(player);\n    data = player.map(function (game) {\n      // return {x:game['gameKey'], y:game[yMode]};;\n      return {\n        x: game['game'],\n        y: game[yMode]\n      };\n      ;\n    }); // console.log(data);\n\n    return data;\n  }\n\n  function getYMode() {\n    // return d3.selectAll(\"[name=mode]\")\n    return d3.select(\"#hbgoalchart_chartmode\").selectAll('input').filter(function () {\n      return this.checked == true;\n    })[0][0].value;\n  }\n\n  d3.selection.prototype.moveToFront = function () {\n    // console.log(\"move '\" + this[0][0].textContent + \"' to front\");\n    return this.each(function () {\n      this.parentNode.appendChild(this);\n    });\n  };\n\n  d3.selection.prototype.moveToBack = function () {\n    return this.each(function () {\n      var firstChild = this.parentNode.firstChild;\n\n      if (firstChild) {\n        this.parentNode.insertBefore(this, firstChild);\n      }\n    });\n  };\n\n  function getTextWidth(text, fontSize, fontFace) {\n    var a = document.createElement('canvas');\n    var b = a.getContext('2d');\n    b.font = fontSize + 'px ' + fontFace;\n    return b.measureText(text).width;\n  }\n});"],"file":"goalchart.js"}