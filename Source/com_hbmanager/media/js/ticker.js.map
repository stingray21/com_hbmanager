{"version":3,"names":[],"mappings":"","sources":["ticker.js"],"sourcesContent":["\"use strict\";\n\n// ============= definitions =================\nvar maxRuns = 250; // safety to not let it run forever\n\nvar updateInterval = 120; // interval for automatic update in seconds\n\nvar updatePause = 10; // duration for how long the update button is disabled after an update (in seconds)\n\nvar token;\nvar gameId;\nvar appid = '';\nvar gameInfo = {};\nvar extraGameInfo = {};\nvar gameLength = 3600;\nvar gameEndTimestamp = Math.floor(Date.now() / 1000) + 60 * 60 * 6;\nvar extraRunTime = 600; // in seconds\n\nvar event_id = 0;\nvar max_event_id = 0;\nvar eventList = [];\nvar playerList = [];\nplayerList[1] = []; // Home team\n\nplayerList[2] = []; // Away team\n\nvar timeouts = [];\ntimeouts[1] = []; // Home team\n\ntimeouts[2] = []; // Away team\n\nvar gameover = false;\nvar updateTimer; // scoreboard\n\nvar scoreboard_svg;\nvar scoreboard;\nvar sb_height = 100;\nvar sb_width = 150;\nvar sb_vert_margin = 0;\nvar sb_scoreline = 88;\nvar sb_time = 37;\nvar sb_home = 53;\nvar sb_away = 135;\nvar sb_radius = 8;\nvar sb_offset = 2; // =========== polyfill ============\n// Add a getElementsByClassName function if the browser doesn't have one\n// Limitation: only works with one class name\n// Copyright: Eike Send http://eike.se/nd\n// License: MIT License\n// copied from https://gist.github.com/eikes/2299607\n\nif (!document.getElementsByClassName) {\n  document.getElementsByClassName = function (search) {\n    var d = document,\n        elements,\n        pattern,\n        i,\n        results = [];\n\n    if (d.querySelectorAll) {\n      // IE8\n      return d.querySelectorAll(\".\" + search);\n    }\n\n    if (d.evaluate) {\n      // IE6, IE7\n      pattern = \".//*[contains(concat(' ', @class, ' '), ' \" + search + \" ')]\";\n      elements = d.evaluate(pattern, d, null, 0, null);\n\n      while (i = elements.iterateNext()) {\n        results.push(i);\n      }\n    } else {\n      elements = d.getElementsByTagName(\"*\");\n      pattern = new RegExp(\"(^|\\\\s)\" + search + \"(\\\\s|$)\");\n\n      for (i = 0; i < elements.length; i++) {\n        if (pattern.test(elements[i].className)) {\n          results.push(elements[i]);\n        }\n      }\n    }\n\n    return results;\n  };\n}\n\nif (SVGElement.prototype.getElementsByClassName === undefined) {\n  SVGElement.prototype.getElementsByClassName = function (className) {\n    return this.querySelectorAll('.' + className);\n  };\n} // ----------- END polyfill --------------------\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n  //console.log(\"DOM fully loaded and parsed\");\n  var urlParams = new URLSearchParams(window.location.search.substring(1));\n  token = urlParams.get('token');\n  gameId = urlParams.get('gameId'); // console.log(token);\n\n  if (token === null) return false; // var base_url = 'https://spo.handball4all.de/service/if_ticker_data.php'; \n  // base_url is set in default.php of view\n\n  if (testMode || token === 'test') {\n    testMode = true;\n    base_url = './media/com_hbmanager/test/ticker_feed.php';\n  }\n\n  if (testMode) {\n    updateInterval = 120; // interval for automatic update in seconds\n\n    updatePause = 2;\n  } // create an svg container\n\n\n  scoreboard_svg = d3.select(\"#scoreboardframe\").append(\"svg:svg\").attr(\"id\", \"scoreboardgraph\"); // .attr(\"class\", \"hidden\"); // only make visible if data loaded\n\n  scoreboard = scoreboard_svg.append(\"g\").attr(\"id\", \"scoreboard\").attr(\"class\", \"score\");\n  var cmd = 'getGameInfo';\n  var url = base_url + '?token=' + token + '&appid=' + appid + '&cmd=' + cmd; // console.log(url);\n\n  d3.json(url, function (error, data) {\n    if (error != null) {\n      console.log(error);\n    }\n\n    ; // console.log(data);\n\n    if (typeof data != 'undefined' || data.playerdata !== null) {\n      gameInfo = data; // console.log(gameInfo);\n\n      initializeScoreboard();\n      updateGameInfo();\n      now = new Date(); // console.log('Start:'+now.getHours()+':'+now.getMinutes()+':'+now.getSeconds()+' Uhr');\n\n      runTicker();\n      runUpdateTimer();\n    } else {\n      console.log('No data');\n    }\n  });\n});\n\nfunction updateGameInfo() {\n  // console.log(gameInfo);\n  var url = './index.php?option=com_hbmanager&task=getAdditionalGameInfo&format=raw&gameId=' + gameId; // console.log(url);\n\n  var xhttp;\n  xhttp = new XMLHttpRequest();\n\n  xhttp.onreadystatechange = function () {\n    document.getElementsByClassName('teams')[0].innerHTML = gameInfo.home_lname + \" - \" + gameInfo.guest_lname;\n    document.getElementsByClassName('location')[0].innerHTML = gameInfo.gym_name + \" (\" + gameInfo.gym_town + \")\";\n    var refString = \"Schiedsrichter:\";\n    if (gameInfo.report.refereeA.name !== null) refString += \" \" + gameInfo.report.refereeA.prename.substring(0, 1) + \". \" + gameInfo.report.refereeA.name;\n    if (gameInfo.report.refereeB.name !== null) refString += \" und \" + gameInfo.report.refereeB.prename.substring(0, 1) + \". \" + gameInfo.report.refereeB.name;\n    document.getElementsByClassName('referee')[0].innerHTML = refString;\n    document.getElementById('homePlayerframe').getElementsByClassName('team')[0].innerHTML = gameInfo.home_lname;\n    document.getElementById('awayPlayerframe').getElementsByClassName('team')[0].innerHTML = gameInfo.guest_lname;\n\n    if (this.readyState == 4 && this.status == 200) {\n      // console.log(this);\n      // console.log(this.responseText);\n      response = JSON.parse(this.responseText);\n\n      if (response !== null) {\n        extraGameInfo = response;\n        document.getElementsByClassName('league')[0].innerHTML = extraGameInfo.team + \", \" + extraGameInfo.league + \" (\" + extraGameInfo.leagueKey + \")\";\n        gameLength = extraGameInfo.gameLength;\n      }\n    }\n  };\n\n  xhttp.open(\"GET\", url, true);\n  xhttp.send();\n}\n\nfunction runTicker() {\n  // index++;\n  if (checkEndCondtion()) {\n    endTicker();\n  } else {\n    // now = new Date();\n    // console.log(now.getMinutes()+':'+now.getSeconds());\n    updateTicker();\n    updateTimer = setTimeout(runTicker, updateInterval * 1000);\n  }\n}\n\nfunction checkEndCondtion() {\n  if (event_id >= maxRuns) {\n    console.log(\"zu viele Anfragen\");\n    var tooManyRuns = true;\n  }\n\n  if (Math.floor(Date.now() / 1000) - gameEndTimestamp > extraRunTime) {\n    console.log(\"zu lange\");\n    var tooMuchTime = true;\n  }\n\n  if (tooManyRuns || tooMuchTime) {\n    gameover = true;\n    return true;\n  }\n\n  return false;\n}\n\nfunction endTicker() {\n  console.log('finished');\n  clearTimeout(updateTimer);\n  pauseBtn(true); // console.log(eventList);\n  // console.log(playerList);\n\n  updateDisplay();\n}\n\nfunction updateTicker() {\n  if (checkEndCondtion()) {\n    endTicker();\n  } else {\n    getTickerCount(event_id, updateMaxEventId);\n    pauseBtn();\n    lastUpdate = Math.floor(Date.now() / 1000);\n  }\n}\n\nfunction pauseBtn() {\n  var _final = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var btnId = 'updateTickerBtn';\n  document.getElementById(btnId).disabled = true;\n  document.getElementById(btnId).classList.add('disabled');\n\n  if (!_final) {\n    document.getElementById(\"currentEvent\").classList.add('hidden');\n    var loaderId = 'eventLoader';\n    document.getElementById(loaderId).classList.add('run');\n    setTimeout(activateBtn, updatePause * 1000);\n  }\n}\n\nfunction activateBtn() {\n  var btnId = 'updateTickerBtn';\n  document.getElementById(btnId).disabled = false;\n  document.getElementById(btnId).classList.remove('disabled');\n}\n\nfunction runUpdateTimer() {\n  // console.log('runUpdateTimer');\n  t = Math.floor(Date.now() / 1000);\n  document.getElementById(\"updateTimer\").innerHTML = formatTime(t - lastUpdate);\n\n  if (event_id < maxRuns && !gameover) {\n    setTimeout(runUpdateTimer, 1000);\n  } else {\n    document.getElementById(\"updateTimer\").innerHTML = '-';\n  }\n}\n\nfunction updateEvents() {\n  var diff = max_event_id - event_id; // console.log(diff);\n\n  for (i = event_id; i < max_event_id; i++) {\n    // console.log(event_id,max_event_id);\n    getTickerEvent(i, getEvent);\n  }\n\n  event_id = max_event_id;\n}\n\nfunction getTickerCount(currCount, callbackFunc) {\n  // console.log(event);\n  var cmd = 'getTickerCount';\n  var url = base_url + '?token=' + token + '&appid=' + appid + '&cmd=' + cmd + '&index=' + currCount; // console.log(url);\n\n  var xhttp;\n  xhttp = new XMLHttpRequest();\n\n  xhttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      // console.log(this);\n      // console.log(this.responseText);\n      response = JSON.parse(this.responseText);\n      callbackFunc(response);\n    }\n  };\n\n  xhttp.open(\"GET\", url, true);\n  xhttp.send();\n}\n\nfunction updateMaxEventId(response) {\n  // '{\"count\":43,\"ticker_update\":67,\"status\":0,\"status_descripion\":\"OK\"}'\n  max_event_id = response.count;\n  var loaderId = 'eventLoader';\n  document.getElementById(loaderId).classList.remove('run');\n  updateEvents();\n}\n\nfunction getTickerEvent(id, callbackFunc) {\n  // console.log('getTickerEvent '+id);\n  // console.log(event);\n  var cmd = 'getTickerMessage';\n  var url = base_url + '?token=' + token + '&appid=' + appid + '&cmd=' + cmd + '&index=' + id;\n  var xhttp;\n  xhttp = new XMLHttpRequest();\n\n  xhttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      // console.log(this.responseText);\n      try {\n        // console.log(\"Current ID:\"+id);\n        event = JSON.parse(this.responseText); // throw 'jsonParseException'; // generates an exception\n      } catch (e) {\n        // statements to handle any exceptions\n        // console.log(e); // pass exception object to error handler\n        console.warn('Invalid JSON');\n        event = JSON.parse('{\"game_time\":\"\",\"home_score\":\"\",\"guest_score\":\"\",\"message\":\"\",\"stops_time\":true,\"status\":2,\"status_descripion\":\"Error\"}');\n      }\n\n      event.index = id; // console.log(event.game_time);\n      // console.log(id, event);\n\n      callbackFunc(event);\n    }\n  };\n\n  xhttp.open(\"GET\", url, true);\n  xhttp.send();\n}\n\nfunction getEvent(event) {\n  // console.log(event);\n  event = parseEvent(event);\n\n  if (eventList.length === max_event_id) {\n    // console.log('Update eventList (List: ' + eventList.length + ' , max: ' + max_event_id + ' )' );\n    var status = updateEventList();\n    playerList[1] = []; // Home team\n\n    playerList[2] = []; // Away team\n\n    eventList.forEach(function (element) {\n      if (element.status === 0 && element.player !== null && element.valid) {\n        addToPlayerList(element);\n      }\n    });\n    updateDisplay();\n  }\n}\n\nfunction updateDisplay() {\n  updatePlayerDisplay(playerList[1], 'home');\n  updatePlayerDisplay(playerList[2], 'away');\n  updateHistory();\n  updateScoreBoard();\n  document.getElementById(\"currentEvent\").classList.remove('hidden');\n  document.getElementById(\"currentEvent\").innerHTML = eventList[0].editedMessage;\n}\n\nfunction updateHistory() {\n  document.getElementById('historyframe').innerHTML = '';\n  var table = document.createElement(\"TABLE\");\n\n  for (var _i = 0; _i < eventList.length; _i++) {\n    if (eventList[_i].valid) {\n      var row = document.createElement(\"TR\");\n      var cell;\n\n      if (testMode) {\n        cell = document.createElement(\"TD\");\n        cell.classList.add('index'); // if (!testMode) cell.classList.add('hidden');\n\n        cell.appendChild(document.createTextNode(eventList[_i].index));\n        row.appendChild(cell);\n      }\n\n      cell = document.createElement(\"TD\");\n      cell.classList.add('icon'); // console.log(eventList[i].type);\n\n      var icon = document.createElement(\"SPAN\");\n      if (eventList[_i].type !== '') icon.classList.add(eventList[_i].type);\n      cell.appendChild(icon);\n      row.appendChild(cell);\n      cell = document.createElement(\"TD\");\n      cell.classList.add('time');\n      cell.appendChild(document.createTextNode(formatTime(eventList[_i].game_time)));\n      row.appendChild(cell);\n      cell = document.createElement(\"TD\");\n      cell.classList.add('message');\n      cell.appendChild(document.createTextNode(eventList[_i].editedMessage));\n      row.appendChild(cell);\n      cell = document.createElement(\"TD\");\n      cell.classList.add('score');\n      if (eventList[_i].goal) cell.classList.add('goal');\n      cell.appendChild(document.createTextNode(eventList[_i].home_score));\n      row.appendChild(cell);\n      cell = document.createElement(\"TD\");\n      cell.classList.add('colon');\n      if (eventList[_i].goal) cell.classList.add('goal');\n      cell.appendChild(document.createTextNode(':'));\n      row.appendChild(cell);\n      cell = document.createElement(\"TD\");\n      cell.classList.add('score');\n      if (eventList[_i].goal) cell.classList.add('goal');\n      cell.appendChild(document.createTextNode(eventList[_i].guest_score));\n      row.appendChild(cell);\n      table.appendChild(row);\n    }\n  }\n\n  document.getElementById('historyframe').appendChild(table);\n}\n\nfunction updatePlayerDisplay(list, team) {\n  document.getElementById(team + 'Playerframe').getElementsByTagName('div')[0].innerHTML = '';\n  var table = document.createElement(\"TABLE\");\n  var row = document.createElement(\"TR\");\n  var cell = document.createElement(\"TH\"); // cell.appendChild(document.createTextNode('Spieler')); \n\n  cell.appendChild(document.createTextNode(''));\n  row.appendChild(cell);\n  var cell = document.createElement(\"TH\");\n  cell.appendChild(document.createTextNode('Tore'));\n  row.appendChild(cell);\n  var cell = document.createElement(\"TH\");\n  cell.appendChild(document.createTextNode('7m'));\n  row.appendChild(cell);\n  table.appendChild(row);\n  list.forEach(function (d) {\n    var row = document.createElement(\"TR\");\n    var cell = document.createElement(\"TD\");\n    cell.appendChild(printPlayer(d));\n    row.appendChild(cell);\n    var cell = document.createElement(\"TD\");\n    cell.appendChild(document.createTextNode(printGoals(d.goals)));\n    row.appendChild(cell);\n    var cell = document.createElement(\"TD\");\n    cell.appendChild(document.createTextNode(printGoals7m(d.goals7m, d.penalty)));\n    row.appendChild(cell);\n    table.appendChild(row);\n  });\n  document.getElementById(team + 'Playerframe').getElementsByTagName('div')[0].appendChild(table);\n}\n\nfunction printGoals(goals) {\n  if (goals == 0) {\n    return '';\n  }\n\n  return goals;\n}\n\nfunction printGoals7m(goals, attempts) {\n  if (attempts == 0) {\n    return '';\n  }\n\n  return goals + '/' + attempts;\n}\n\nfunction printPlayer(player) {\n  var span = document.createElement(\"SPAN\");\n  var name = document.createElement(\"SPAN\");\n  var num = document.createElement(\"SPAN\");\n\n  if (isNaN(1 * player.player)) {\n    name.appendChild(document.createTextNode('Betreuer '));\n    num.appendChild(document.createTextNode(player.player));\n  } else {\n    name.appendChild(document.createTextNode('Spieler '));\n    num.appendChild(document.createTextNode('#' + player.player));\n  }\n\n  name.classList.add('name');\n  span.appendChild(name);\n  span.appendChild(num);\n  var cards = document.createElement(\"SPAN\");\n  cards.classList.add('icon');\n\n  if (player['yellow'] === 1) {\n    var icon = document.createElement(\"SPAN\");\n    icon.classList.add('yellow');\n    cards.appendChild(icon);\n  }\n\n  for (var i = 0; i < player['suspension']; i++) {\n    icon = document.createElement(\"SPAN\");\n    icon.classList.add('suspension');\n    cards.appendChild(icon);\n  }\n\n  if (player['red'] === 1) {\n    icon = document.createElement(\"SPAN\");\n    icon.classList.add('red');\n    cards.appendChild(icon);\n  }\n\n  span.appendChild(cards); // console.log(icon);\n\n  return span;\n}\n\nfunction parseEvent(event) {\n  // \"status_descripion\":\"Error\"\n  if (event.status_descripion !== 'OK' || event.status === 2) {\n    return event;\n  }\n\n  event.game_time = event.game_time * 1;\n  event.home_score = event.home_score * 1;\n  event.guest_score = event.guest_score * 1; // Tor für die Heimmannschaft durch die Nummer 2\n  // Mannschafts-Auszeit der Gastmannschaft\n  // Verwarnung für die Nummer 17 der Gastmannschaft\n  // 2-min Strafe für die Nummer 5 der Gastmannschaft\n  // Spielstand 1. Halbzeit\n  // Spielstand 2. Halbzeit\n  // 7m-Wurf für die Gastmannschaft: Kein Treffer durch die Nummer 5\n  // Erfolgreicher 7m-Wurf für die Gastmannschaft durch die Nummer 7\n  // Disqualifikation für die Nummer 8 der Heimmannschaft\n  // Verwarnung für die Nummer A der Heimmannschaft\n\n  event.type = ''; // console.log(event);\n\n  re = /^Spielstand 2. Halbzeit/i;\n\n  if (event.message.match(re) !== null || event.game_time >= gameLength) {\n    console.log(\"Spielende\");\n    gameEndTimestamp = Math.floor(Date.now() / 1000);\n  }\n\n  re = /^Tor für/i;\n  event.goal = event.message.match(re) !== null ? 1 : 0;\n  re = /^Erfolgreicher 7m-Wurf/i;\n  event.goal7m = event.message.match(re) !== null ? 1 : 0;\n  event.goal += event.goal7m;\n  event.type = event.goal ? 'goal' : event.type;\n  ;\n  re = /^Mannschafts-Auszeit/i;\n  event.type = event.message.match(re) !== null ? 'timeout' : event.type;\n  ;\n  re = /7m-Wurf/i;\n  event.type = event.message.match(re) !== null ? 'penalty' : event.type;\n  re = /^Verwarnung/i;\n  event.type = event.message.match(re) !== null ? 'yellow' : event.type;\n  re = /^2-min Strafe/i;\n  event.type = event.message.match(re) !== null ? 'suspension' : event.type;\n  re = /^Disqualifikation/i;\n  event.type = event.message.match(re) !== null ? 'red' : event.type;\n  event.team = 0;\n  re = /Heimmannschaft/i;\n  event.team = event.message.match(re) !== null ? 1 : event.team;\n  re = /Gastmannschaft/i;\n  event.team = event.message.match(re) !== null ? 2 : event.team;\n  re = /Nummer (\\d{1,2}|[A-D])/i; // TODO Mannschaftsverantw.\n\n  temp = event.message.match(re);\n  event.player = null;\n  if (temp !== null) event.player = temp[1]; // console.log(event);\n\n  event.editedMessage = event.message;\n  event.editedMessage = event.editedMessage.replace(/Spielstand 1. Halbzeit/, 'Halbzeitpause');\n  event.editedMessage = event.editedMessage.replace(/Spielstand 2. Halbzeit/, 'Spielende');\n  event.editedMessage = event.editedMessage.replace(/(die|der) Gastmannschaft/, gameInfo.guest_lname);\n  event.editedMessage = event.editedMessage.replace(/(die|der) Heimmannschaft/, gameInfo.home_lname);\n  event.editedMessage = event.editedMessage.replace(/die Nummer /, '#');\n  eventList.push(event);\n  return event;\n}\n\nfunction updateEventList() {\n  // eventList[event.index] = event;\n  // console.log(eventList);\n  eventList.sort(function (a, b) {\n    // console.log(b.game_time - a.game_time);\n    if (a.game_time == b.game_time) return b.index - a.index;\n    return b.game_time - a.game_time;\n  }); // mark duplicates\n\n  eventList = eventList.map(function (item, pos, ary) {\n    // console.log(item,ary);\n    item.valid = true;\n\n    if (pos) {\n      // console.log(pos);\n      var t1 = item.game_time === ary[pos - 1].game_time;\n      var t2 = item.home_score === ary[pos - 1].home_score;\n      var t3 = item.guest_score === ary[pos - 1].guest_score;\n      var t4 = item.message === ary[pos - 1].message;\n      var different = t1 * t2 * t3 * t4;\n      item.valid = !different;\n    }\n\n    return item;\n  }); // this might be unnecessary? ordered by game_time might be good enough?\n  // eventList.sort(function(a, b) {\treturn (a.index < b.index);\t});\n  // console.log(eventList);\n\n  return true;\n}\n\nfunction addToPlayerList(event) {\n  if (event.type === 'timeout') {\n    timeouts[event.team]++;\n    return;\n  }\n\n  if (event.team === 0) return;\n  var list = playerList[event.team];\n  var id = list.length; // console.log(id);\n\n  list.map(function (element, i) {\n    // console.log(i, event.player, element.player);\n    if (event.player === element.player) id = i;\n  }); // console.log(id);\n\n  if (id === list.length) {\n    list.push({\n      \"player\": event.player,\n      \"goals\": 0,\n      \"goals7m\": 0,\n      \"penalty\": 0,\n      \"yellow\": 0,\n      \"suspension\": 0,\n      \"red\": 0\n    });\n  } // console.log('add at '+id);\n\n\n  list[id]['goals'] = list[id]['goals'] + event.goal;\n  list[id]['goals7m'] = list[id]['goals7m'] + event.goal7m;\n\n  if (event.type !== '') {\n    list[id][event.type]++;\n  }\n\n  list.sort(function (a, b) {\n    var p1 = isNaN(1 * a.player) ? 1000 : 1 * a.player;\n    var p2 = isNaN(1 * b.player) ? 1000 : 1 * b.player; // console.log(a.player, p1, b.player, p2, p1 > p2);\n\n    return p1 - p2;\n  }); // console.log(list);\n} // ========= helpers =============\n\n\nfunction formatTime(d) {\n  var min = ~~(d / 60);\n  var sec = ('00' + ~~(d % 60)).substr(-2);\n  return min + \":\" + sec;\n}\n\nfunction timestring2Sec(d) {\n  // console.log(d);\n  var min = 1 * d.substr(-5, 2);\n  var sec = 1 * d.substr(-2, 2); // console.log(min + \"min and \" + sec + \"sec\");\n\n  time = min * 60 + sec; // console.log(time);\n\n  return time;\n} // ============= main =================\n\n\nfunction initializeGraph() {\n  console.log('initializeGraph');\n}\n\nfunction initializeScoreboard() {\n  scoreboard_svg.attr(\"width\", sb_width + \"px\").attr(\"height\", sb_height + sb_vert_margin * 2 + \"px\"); // scoreboard\n  // .attr(\"transform\", \"translate(\" + (sb_frame_Width/2-sb_width/2) + \",\" + (sb_vert_margin) + \")\");\n  // console.log('initializeScoreboard');\n\n  scoreboard.append(\"rect\").attr(\"class\", \"background\").attr(\"width\", sb_width + \"px\").attr(\"height\", sb_height + \"px\").attr(\"rx\", sb_radius).attr(\"ry\", sb_radius).text(\"0\");\n  scoreboard.append(\"rect\").attr(\"class\", \"frame\").attr(\"x\", sb_offset + \"px\").attr(\"y\", sb_offset + \"px\").attr(\"width\", sb_width - 2 * sb_offset + \"px\").attr(\"height\", sb_height - 2 * sb_offset + \"px\").attr(\"rx\", sb_radius).attr(\"ry\", sb_radius).text(\"0\");\n  scoreboard.append(\"rect\").attr(\"class\", \"background\").attr(\"x\", 2 * sb_offset + \"px\").attr(\"y\", 2 * sb_offset + \"px\").attr(\"width\", sb_width - 4 * sb_offset + \"px\").attr(\"height\", sb_height - 4 * sb_offset + \"px\").attr(\"rx\", sb_radius).attr(\"ry\", sb_radius).text(\"0\");\n  scoreboard.append(\"text\").attr(\"class\", \"team\").attr(\"x\", sb_home + \"px\").attr(\"y\", sb_scoreline - 32 + \"px\").text(\"HEIM\");\n  scoreboard.append(\"text\").attr(\"class\", \"team\").attr(\"x\", sb_away + \"px\").attr(\"y\", sb_scoreline - 32 + \"px\").text(\"GAST\");\n  scoreboard.append(\"text\").attr(\"class\", \"diget time bg\").attr(\"x\", sb_width / 2 + 46 + \"px\").attr(\"y\", sb_time + \"px\").text(\"88 88\");\n  scoreboard.append(\"text\").attr(\"class\", \"diget dots bg\").attr(\"x\", sb_width / 2 + \"px\").attr(\"y\", sb_time + \"px\").text(\":\");\n  scoreboard.append(\"text\").attr(\"id\", \"scoreTime\").attr(\"class\", \"diget time\").attr(\"x\", sb_width / 2 + 46 + \"px\").attr(\"y\", sb_time + \"px\").text(formatTime(\"0\"));\n  scoreboard.append(\"text\").attr(\"class\", \"diget score bg\").attr(\"x\", sb_home + \"px\").attr(\"y\", sb_scoreline + \"px\").text(\"88\");\n  scoreboard.append(\"text\").attr(\"id\", \"scoreHome\").attr(\"class\", \"diget score\").attr(\"x\", sb_home + \"px\").attr(\"y\", sb_scoreline + \"px\").text(\"0\");\n  scoreboard.append(\"text\").attr(\"class\", \"diget score bg\").attr(\"x\", sb_away + \"px\").attr(\"y\", sb_scoreline + \"px\").text(\"88\");\n  scoreboard.append(\"text\").attr(\"id\", \"scoreAway\").attr(\"class\", \"diget score\").attr(\"x\", sb_away + \"px\").attr(\"y\", sb_scoreline + \"px\").text(\"0\");\n}\n\nfunction updateScoreBoard(score) {\n  score = eventList[0]; // console.log('updateScoreboard');\n\n  scoreboard.select(\"#scoreHome\").text(score.home_score);\n  scoreboard.select(\"#scoreAway\").text(score.guest_score);\n  scoreboard.select(\"#scoreTime\").text(formatTime(score.game_time).replace(':', ' '));\n}"],"file":"ticker.js"}